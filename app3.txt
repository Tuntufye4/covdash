
import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output
import plotly.graph_objs as go

# Sample COVID-19 data
covid_data = {
    "District": ["Lilongwe", "Blantyre", "Mzuzu", "Zomba", "Dedza"],
    "Cases": [100, 50, 200, 75, 120],
    "Vaccinated": [60, 30, 90, 40, 80],
    "OnTreatment": [20, 10, 30, 15, 25]
}

# Create the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

app.layout = html.Div([
    # Title and Line Section
    html.Div([
        html.H1("COVID-19 Statistics", style={'margin-top': '20px', 'margin-left': '115px'}),
        html.Hr(style={'border-top': '2px solid #ccc', 'margin-left': '115px', 'margin-right': '230px'}),
    ]),
    
    # Cards Section
    dbc.Row([
        # Total Cases Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['Cases']), className="card-count"),
                    html.P("Total COVID-19 Cases", className="card-text"),
                ]),
                color="light"
                
            ),
            width={"size": 3, "offset": 1},
        ),
        
        # Vaccinated Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['Vaccinated']), className="card-count text-white"),
                    html.P("Count of Vaccinated", className="card-text text-white"),
                ]),
                color="dark"
            ),
            width={"size": 3},
        ),
        
        # On Treatment Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['OnTreatment']), className="card-count text-white"),
                    html.P("Count of Those on Treatment", className="card-text text-white"),
                ]),
                color="primary"
                
            ),
            width={"size": 3},
        ),
    ], style={'margin-top': '20px', 'margin-bottom': '30px'}),
    
    # Dropdowns Section (Between Cards and Charts)
    dbc.Row([
        # Dropdown for Chart Filter
        dbc.Col(
            dcc.Dropdown(
                id='chart-filter',
                options=[
                    {'label': 'On Treatment', 'value': 'OnTreatment'},
                    {'label': 'Vaccinated', 'value': 'Vaccinated'}
                ],
                value='OnTreatment',
            ),
            width={"size": 6, "offset": 3},
        ),
    ], style={'margin-top': '20px'}),
    
    # Charts Section
    dbc.Row([
        # Left Section: Bar Graph
        dbc.Col(
            dcc.Graph(
                id='bar-chart',
                style={'width': '100%'}
            ),
            width={"size": 6},
        ),
        
        # Right Section: Pie Chart
        dbc.Col(
            dcc.Graph(
                id='pie-chart',
                style={'width': '100%'}
            ),
            width={"size": 6},
        ),
    ]),
])

@app.callback(
    [Output('bar-chart', 'figure'),
     Output('pie-chart', 'figure')],
    [Input('chart-filter', 'value')]
)
def update_charts(selected_filter):
    if selected_filter == 'OnTreatment':
        bar_chart_data = go.Bar(x=covid_data['District'], y=covid_data['OnTreatment'], name='On Treatment')
        pie_chart_data = go.Pie(labels=covid_data['District'], values=covid_data['OnTreatment'], name='On Treatment')
    else:
        bar_chart_data = go.Bar(x=covid_data['District'], y=covid_data['Vaccinated'], name='Vaccinated')
        pie_chart_data = go.Pie(labels=covid_data['District'], values=covid_data['Vaccinated'], name='Vaccinated')

    bar_chart = {
        'data': [bar_chart_data],
        'layout': {'title': f'COVID-19 {selected_filter} Distribution'}
    }

    pie_chart = {
        'data': [pie_chart_data],
        'layout': {'title': f'COVID-19 {selected_filter} Distribution'}
    }

    return bar_chart, pie_chart

if __name__ == '__main__':
    app.run_server(debug=False)







