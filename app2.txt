import dash
import dash_bootstrap_components as dbc
from dash import dcc, html
import plotly.graph_objs as go
import dash_leaflet as dl

# Sample COVID-19 data
covid_data = {
    "District": ["Lilongwe", "Blantyre", "Mzuzu", "Zomba", "Dedza"],
    "Cases": [100, 50, 200, 75, 120],
    "Vaccinated": [60, 30, 90, 40, 80],
    "OnTreatment": [20, 10, 30, 15, 25],
    "Latitude": [-13.9833, -15.7833, -11.4655, -15.3833, -14.3667],
    "Longitude": [33.7833, 35.0000, 34.0209, 35.3167, 34.3333]
}

# Create the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

app.layout = html.Div([
    # Title and Line Section
    html.Div([
        html.H1("COVID-19 Statistics", style={'margin-top': '20px', 'margin-left': '115px'}),
        html.Hr(style={'border-top': '2px solid #ccc', 'margin-left': '115px', 'margin-right':'230px'}),
    ]),
    
    # Cards Section
    dbc.Row([
        # Total Cases Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['Cases']), className="card-count"),
                    html.P("Total COVID-19 Cases", className="card-text"),
                ]),
                color="light"
                
            ),
            width={"size": 3, "offset": 1},
        ),
        
        # Vaccinated Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['Vaccinated']), className="card-count text-white"),
                    html.P("Count of Vaccinated", className="card-text text-white"),
                ]),
                color="dark"
            ),
            width={"size": 3},
        ),
        
        # On Treatment Card
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3(sum(covid_data['OnTreatment']), className="card-count text-white"),
                    html.P("Count of Those on Treatment", className="card-text text-white"),
                ]),
                color="primary"
                
            ),
            width={"size": 3},
        ),
    ], style={'margin-top': '20px', 'margin-bottom': '30px'}),
    
    # Left Section: Pie Chart

    html.Div([
        dcc.Graph(
            id='pie-chart',
            figure={
                'data': [go.Pie(labels=covid_data['District'], values=covid_data['Cases'])],
                'layout': {'title': 'COVID-19 Cases Distribution'}
            }
        )
    ], style={'display': 'inline-block', 'width': '45%'}),
    
    # Right Section: Dash Leaflet Map with Markers
    html.Div([
        dl.Map([
            dl.TileLayer(),
            *[
                dl.Marker(position=(lat, lon), children=[
                    dl.Tooltip(f"District: {district}<br>Cases: {cases}")
                ]) for district, cases, lat, lon in zip(covid_data['District'], covid_data['Cases'], covid_data['Latitude'], covid_data['Longitude'])
            ]
        ], center=(-13.254308, 34.301525), zoom=6, style={'width': '70%', 'height': '400px'}),
    ], style={'display': 'inline-block', 'width': '55%', 'vertical-align': 'top'}),
])


    
    

if __name__ == '__main__':
    app.run_server(debug=False)
